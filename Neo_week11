#include<iostream>
#include<cmath>
using namespace std;
void merge(int*A,int start_index,int middle_index,int last_index)
{
	int i = start_index,j=middle_index+1;
	while(i<=middle_index&&j<=last_index)
	{
		if(A[i]<A[j])
			i++;
		else
		{
			int temp = A[j];
			for(int k = j-1;k>=i;k--)
				A[k+1]= A[k];
			A[i] = temp;
			i++;
			j++;
			middle_index++;
		}
	}
}
void mergeSort(int *A,int start_index,int last_index)
{
	if(start_index>=last_index)
		return;
	else
	{
		int middle_index = (start_index+last_index)/2;
		for(int i = start_index;i<=middle_index;i++)
			cout<<A[i]<<"	";
		cout<<endl;
		mergeSort(A,start_index,middle_index);
		for(int i = middle_index+1;i<=last_index;i++)
			cout<<A[i]<<"	";
		cout<<endl;
		mergeSort(A,middle_index+1,last_index);
		merge(A,start_index,middle_index,last_index);
	}
}
void print_vertical(unsigned int n)
{
	if(n==0)
	{
		cout<<n<<endl;
		return;
	}
	else
	{
		int m = log10(static_cast<double>(n));
		int p = pow(10.0,m);//p will be the highest pow of 10 in this number
		while(p>0)
		{
			int digit = n/p;
			cout<<digit<<endl;
			n = n%p;
			p = p/10;
		}
	}
}

void print_vertical_recursive(unsigned int n)
{
	if(n<10)
		cout<<n<<endl;
	else
	{
		print_vertical_recursive(n/10);
		cout<<n%10<<endl;
	}
}
void t1()
{
	unsigned int n;
	cout<<"Enter a non-negative integer: "<<endl;
	cin>>n;
	print_vertical_recursive(n);
}

bool sequential_search(int*A,int start_index,int last_index,int value)
{
	if(start_index>last_index)
		return false;
	else if(A[start_index]==value)
		return true;
	else
		return sequential_search(A,start_index+1,last_index,value);
}
void t2()
{
		int *A = new int[10];
	for(int i=0;i<10;i++)
		A[i] = rand()%25;
	int search_value = rand()%25;
	cout<<"The array is: ";
	for(int i = 0;i<10;i++)
		cout<<A[i]<<"	";
	cout<<endl;
	cout<<"The value to search is "<<search_value <<endl;
	
	bool flag = sequential_search(A,0,9,search_value);
	if(flag)
		cout<<search_value<<" is found."<<endl;
	else
		cout<<search_value<<" is NOT found."<<endl;
}

int move(int n,char A,char B,char C,int step)
{
	if(n==1)
	{
		cout<<"Step:"<<step<<endl;
		cout<<"Move top disc from "<<A<<" to "<<C<<endl;
		return 1;
	}
	else
	{
	int x,y,z;
	x=move(n-1,A,C,B,step);
	step+=x;
	y=move(1,A,B,C,step);
	step+=y;
	z=move(n-1,B,A,C,step);
	step+=z;
	return x+y+z;
	}
}
void hanoi_tower()
{
	char A = 'A',B = 'B',C = 'C';
	int n;
	cin>>n;
	cout<<move(n,A,B,C,1);
}
int findMinimum(int*A,int startIndex,int lastIndex)
{
	int index = startIndex;
	for(int i = index;i<=lastIndex;i++)
	{
		if(A[i]<A[index])
			index = i;
	}
	return index;
}
void selectionSort(int*A,int startIndex,int lastIndex)
{
	if(startIndex>=lastIndex)
	{
		return;
	}
	else
	{
		int index = findMinimum(A,startIndex,lastIndex);
		int temp = A[startIndex];
		A[startIndex] = A[index];
		A[index] = temp;
		selectionSort(A,startIndex+1,lastIndex);
	}
}

void t3()
{
	int *A = new int[10];
	for(int i=0;i<10;i++)
		A[i] = rand()%25;
	cout<<"The array is: ";
	for(int i = 0;i<10;i++)
		cout<<A[i]<<"	";
	cout<<endl;
	selectionSort(A,0,9);
	cout<<"The array is: ";
	for(int i = 0;i<10;i++)
		cout<<A[i]<<"	";
	cout<<endl;
}
int main()
{
	t3();
	//hanoi_tower();
	//system("Pause");
	//return 0;
}

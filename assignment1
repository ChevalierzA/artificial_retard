#include "List.h"

void EnterPatient(List & list)
{

	int n; //the number of patient form user
	cout << "Enter the number of patient: " << endl;
	cin >> n;
	cout << endl;
	for(int i = 0; i < n; i++)
	{
	string Name, Address, Phone, Email, careCard;
	cout << "Enter the Name, Address, Phone, Email, careCard"
	cin >> Name;
	cin >> Address;
	cin >> Phone;
	cin >> Email;
	cin >> careCard;
	Patient temp(careCard);
	temp.setName(Name);
	temp.setAddress(Address);
	temp.setPhone(Phone);
	temp.setEmail(Email);
	list.insert(temp);
	}

}

void RemovePatient(List &list)
{
	string toBeRemoved;
	bool flag;
	cout << "Enter the patient number you want to remove: " << endl;
	cin >> toBeRemoved;
	for(int i = 0; i < list.getElementCount(); i++)
	{
		if(list[i].getCareCard() == toBeRemoved)
			flag = list.remove(list[i]);
	}

	if(flag)
		cout << "Succeessfully removed the patient." << endl;
	else
		cout << "Error: Not Found." << endl;
}

void SearchPatient(List &list)
{
	string target;
	bool flag = false;
	cout << "Enter the patient number you want to search: " << endl;
	cin >> target;
	for(int i = 0; i < list.getElementCount(); i++)
	{
		if(list[i].getCareCard() == target)
			flag = true;
	}
	 
	if(flag)
		cout << "Succeessfully find the patient with careCard:" << target << endl;
	else
		cout << "Error: Not Found." << endl;
}

void ModifyPatient(List &list)
{
	string target;
	int index = -1;
	for(int i = 0; i < list.getElementCount(); i++)
	{
		if(list[i].getCareCard() == target)
			index = i;
	}
	if(index == -1)
		cout << "Error: Not Found." << endl;
	else
	{
		int flag;
		cout<<"What do you want to change?"<<endl;
		cout<<"1.Address\t2.Name\t3.Phone\t4.Email"<<endl;
		cin>>flag;
		switch(flag)
		case 1 :{cout<<"Enter new Address!"<<endl;cin>>target;list[index].setAddress(target);break;}
		case 2 :{cout<<"Enter new Name!"<<endl;cin>>target;list[index].setName(target);break;}
		case 3 :{cout<<"Enter new Phone!"<<endl;cin>>target;list[index].setPhone(target);break;}
		case 4 :{cout<<"Enter new Email!"<<endl;cin>>target;list[index].setEmail(target);break;}
		default :{"ERROR! Please enter a valid number!"<<endl;break;}
	}
}

void PrintPatient(List &list)
{
	for(int i = 0; i < list.getElementCount(); i++)
	{
		cout << list[i];
	}
}


main()
{
	List list;
	int flag;
	while(1)
	{
		cout<<"What do you want to do?"<<endl;
		cout<<"1.CREATE NEW LIST OF PATIENT"<<endl;
		cout<<"2.REMOVE PATIENT"<<endl;
		cout<<"3.SEARCH PATIENT"<<endl;
		cout<<"4.MODIFY PATIENT"<<endl;
		cout<<"5.PRINT ALL PATIENT"<<endl;
		cout<<"0.EXIT"<<endl;
		switch(flag)
		case 0 : {cout<<"BYE BYE";break;}
		case 1 : {EnterPatient(list);break;}
		case 2 : {RemovePatient(list);break;}
		case 3 : {SearchPatient(list);break;}
		case 4 : {ModifyPatient(list);break;}
		case 5 : {PrintPatient(list);break;}
		default:{cout<<"Please enter a valid number!"<<endl;}
	}
} //end of walkin.cpp

/*
 * List.h
 *
 * Class Description: List data collection ADT.
 * Class Invariant: Data collection with the following characteristics:
 *                   - Each element is unique (no duplicates).
 *                   - (What other characteristic does our List have?)
 *
 * Author:Jiaqing Hu
 * Date:2019/01/20
 */

#pragma once

 // You can add #include statements if you wish.
#include <string>
#include "Patient.h"

using namespace std;


class List {

private:

	/*
	 * You can add more attributes to this class,
	 * but you cannot remove the attributes below
	 * nor can you change them.
	 */

	static const int MAX_ELEMENTS = 5; // Small capacity so can test when data collection becomes full
									   // ***As we are testing the code of our assignment, we can  
									   //    change the value given to this constant.***
	Patient elements[MAX_ELEMENTS];    // Data structure with capacity of MAX_ELEMENTS
	int elementCount;                  // Current element count in element array
	int capacity;                      // Actual maximum capacity of element array   

public:

	/*
	 * You can add more methods to this interface,
	 * but you cannot remove the methods below
	 * nor can you change their prototype.
	 *
	 */

	 // Default constructor
	List();

	// Description: Returns the total element count currently stored in List.
	int  getElementCount() const;
	
	// Description: Insert an element.
	// Precondition: newElement must not already be in data collection.  
	// Postcondition: newElement inserted and elementCount has been incremented.   
	bool insert(const Patient& newElement);

	// Description: Remove an element. 
	// Postcondition: toBeRemoved is removed and elementCount has been decremented.	
	bool remove(const Patient& toBeRemoved);

	// Description: Remove all elements.
	void removeAll();

	// Description: Search for target element.
	//              Returns a pointer to the element if found,
	//              otherwise, returns NULL.
	Patient* search(const Patient& target);


}; // end List.h



/*
 * List.cpp
 *
 * Class Description: List data collection ADT.
 * Class Invariant: Data collection with the following characteristics:
 *                   - Each element is unique (no duplicates).
 *                   - (What other characteristic does our List have?)
 *
 * Author:Jiaqing Hu
 * Date:2019/01/20
 */
#include "pch.h"
#include "List.h"

// Default constructor
// This will create default list with both 0 elementCount & MAX_ELEMENT capacity
List::List()
{
	this->elementCount = 0;
	this->capacity = MAX_ELEMENTS;
}

// Description: Returns the total element count currently stored in List.
int  List::getElementCount() const
{
	return this->elementCount;
}



// Description: Insert an element.
// Precondition: newElement must not already be in data collection.  
// Postcondition: newElement inserted and elementCount has been incremented.   
bool List::insert(const Patient& newElement) {
	if (search(newElement)||this->elementCount>=this->capacity)
		return false;
	else
	{
		elements[elementCount] = newElement;
		elementCount++;
	}
	return true;
}

// Description: Remove an element. 
// Postcondition: toBeRemoved is removed and elementCount has been decremented.	
bool List::remove(const Patient& toBeRemoved) {
	if (this->elementCount==0||search(toBeRemoved)==NULL)
		return false;
	else
	{
		int i = 0;
		for (Patient*p=this->elements; i < this->elementCount; i++,p++)
		{
			if (search(toBeRemoved)==p)
			{
				delete p;
				for (int j = i; j <this->elementCount; j++)
				{
					this->elements[j] = this->elements[j + 1];
				}
			}
		}
		this->elementCount--;
	}
	return true;
}

// Description: Remove all elements.
void List::removeAll() {
	if(this->elementCount == 0)
		return;
	else
	{
		delete[] elements;
		this->elementCount = 0;
	}
}

// Description: Search for target element.
//              Returns a pointer to the element if found,
//              otherwise, returns NULL.
Patient* List::search(const Patient& target) {
	Patient* p = this->elements;
	for (int i = 0; i < this->elementCount; p++)
		if (this->elements[i] == target)
			return p;
	return NULL;
}



/*
 * Patient.h
 *
 * Class Description: Models a walk-in clinic patient.
 * Class Invariant: Each patient has a unique care card number.
 *                  This care card number must have 10 digits.
 *                  This care card number cannot be modified.
 *
 * Author:Jiaqing Hu
 * Date:2019/01/19
 */

#pragma once

 // You can add #include statements if you wish.
#include <string>

using namespace std;


class Patient {

private:
	string Name;
	string careCard;
	string address;
	string phone;
	string email;

	// There are plenty of hints in the provided files to help you complete this section.

public:

	/*
	 * You can add more methods to this public interface,
	 * but you cannot remove the methods below
	 * nor can you change their prototype.
	 *
	 */

	 // Default Constructor
	 // Description: Create a patient with a care card number of "0000000000". 
	 // Postcondition: All data members set to "To be entered", 
	 //                except the care card number which is set to "0000000000".       
	Patient();

	// Parameterized Constructor
	// Description: Create a patient with the given care card number.
	// Postcondition: If aCareCard does not have 10 digits, then care card is set to "0000000000".
	//                All other data members set to "To be entered".
	Patient(string aCareCard);

	// Getters and setters
	// Description: Returns patient's name.
	string getName() const;

	// Description: Returns patient's address.
	string getAddress() const;

	// Description: Returns patient's phone.
	string getPhone() const;

	// Description: Returns patient's email.
	string getEmail() const;

	// Description: Returns patient's care card.
	string getCareCard() const;

	// Description: Sets the patient's name.
	void setName(const string aName);

	// Description: Sets the patient's address.
	void setAddress(const string anAddress);

	// Description: Sets the patient's phone.
	void setPhone(const string aPhone);

	// Description: Sets the patient's email.
	void setEmail(const string anEmail);

	// Overloaded Operators
	// Description: Comparison operator. Compares "this" Patient object with "rhs" Patient object.
	//              Returns true if both Patient objects have the same care card number.
	bool operator == (const Patient & rhs);

	// Description: Greater than operator. Compares "this" Patient object with "rhs" Patient object.
	//              Returns true if the care card number of "this" Patient object is > the care card 
	//              number of "rhs" Patient object.
	bool operator > (const Patient & rhs);

	// Description: Prints the content of "this".
	friend ostream & operator<<(ostream & os, const Patient & p);

}; // end of Patient.h




/*
 * Patient.cpp
 *
 * Class Description: Models a walk-in clinic patient.
 * Class Invariant: Each patient has a unique care card number.
 *                  This care card number must have 10 digits.
 *                  This care card number cannot be modified.
 *
 * Author:Jiaqing Hu
 * Date:2019/01/20
 */

 // You can add #include statements if you wish.
#include <iostream>
#include "Patient.h"

// Default Constructor
// Description: Create a patient with a care card number of "0000000000". 
// Postcondition: All data members set to "To be entered", 
//                except the care card number which is set to "0000000000".       
Patient::Patient() {
	this->careCard = "0000000000";
	this->Name = "To be entered";
	this->address = "To be entered";
	this->email = "To be entered";
	this->phone = "To be entered";
	// You need to complete this method.
}

// Parameterized Constructor
// Description: Create a patient with the given care card number.
// Postcondition: If aCareCard does not have 10 digits, then care card is set to "0000000000".
//                All other data members set to "To be entered".
Patient::Patient(string aCareCard) {
	this->Name = "To be entered";
	this->address = "To be entered";
	this->email = "To be entered";
	this->phone = "To be entered";
	if (sizeof(aCareCard) <= 10)
	{
		this->careCard = "0000000000";
	}
	else
	this->careCard = aCareCard; 
	// You need to complete this method.

}

// Getters and setters -> You need to implement these methods.
	// Description: Returns patient's name.
string Patient::getName() const {
	return this->Name;
}

// Description: Returns patient's address.
string Patient::getAddress() const {
	return this->address;
}

// Description: Returns patient's phone.
string Patient::getPhone() const {
	return this->phone;
}

// Description: Returns patient's email.
string Patient::getEmail() const {
	return this->email;
}

// Description: Returns patient's care card.
string Patient::getCareCard() const {
	return this->careCard;
}

// Description: Sets the patient's name.
void Patient::setName(const string aName) {
	this->Name = aName;
}

// Description: Sets the patient's address.
void Patient::setAddress(const string anAddress) {
	this->address = anAddress;
}

// Description: Sets the patient's phone.
void Patient::setPhone(const string aPhone) {
	this->phone = aPhone;
}

// Description: Sets the patient's email.
void Patient::setEmail(const string anEmail) {
	this->email = anEmail;
}
// Overloaded Operators
// Description: Comparison operator. Compares "this" Patient object with "rhs" Patient object.
//              Returns true if both Patient objects have the same care card number.
bool Patient::operator == (const Patient & rhs) {
	// Compare both Patient objects
	return this->careCard == rhs.getCareCard();
} // end of operator ==

// Description: Greater than operator. Compares "this" Patient object with "rhs" Patient object.
//              Returns true if the care card number of "this" Patient object is > the care card 
//              number of "rhs" Patient object
bool Patient::operator > (const Patient & rhs) {

	// Compare both Patient objects
	return this->careCard > rhs.getCareCard();
} // end of operator >


// Description: Prints the content of "this".
ostream & operator<<(ostream & os, const Patient & p) {
	cout << p.getCareCard() << " - " << "Patient: " << p.getName() << ", " << p.getAddress() << ", " << p.getPhone() << ", " << p.getEmail() << endl;
	// You need to complete this method.   

	return os;

} // end of operator<<

// end of Patient.cpp


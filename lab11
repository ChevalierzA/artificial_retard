#include<iostream>
using namespace std;

void bubbleSort(int*A,int startIndex,int lastIndex)
{
	if(startIndex>lastIndex)
	return;
	else
	{
		for(int i = startIndex;i<lastIndex;i++)
		{
			if(A[i]>A[i+1])
			{
				int temp = A[i];
				A[i] = A[i+1];
				A[i+1] = temp;
			}
		}
		bubbleSort(A,startIndex,lastIndex-1);
	}
}

void t2()
{
	int size = 6;
	int *A = new int [size];
	for (int i = 0; i < size; i++)
		A[i] = rand() % 25;
	cout << "Original Array\n\t";
	for (int i = 0; i < size; i++)
		cout << A[i] << " ";
	cout << endl;
	bubbleSort(A, 0, size-1);
	cout << "Sorted Array Array\n\t";
	for (int i = 0; i < size; i++)
		cout << A[i] << " ";
	cout << endl;
}

void selectionSort(int*A,int startIndex,int lastIndex)
{
	if(startIndex>=lastIndex)
	return;
	else
	{
		for(int i = startIndex;i<=lastIndex;i++)
		{
			if(A[i]>A[lastIndex])
			{
				int temp = A[i];
				A[i] = A[lastIndex];
				A[lastIndex] = temp;
			}
		}
		selectionSort(A,startIndex,lastIndex-1);
	}
}

void t3()
{
int size = 6;
int *A = new int [size];
for (int i = 0; i < size; i++)
A[i] = rand() % 25;
cout << "Original Array\n\t";
for (int i = 0; i < size; i++)
cout << A[i] << " ";
cout << endl;
selectionSort(A, 0, size-1);
cout << "Sorted Array Array\n\t";
for (int i = 0; i < size; i++)
cout << A[i] << " ";
cout << endl;
}
void insertionSort(int*A,int startIndex,int lastIndex)
{
	if(startIndex>lastIndex)
		return;
	else
	{
		insertionSort(A,startIndex,lastIndex-1);
		int temp = A[lastIndex];
		int i;
		for(i = lastIndex-1;i>=0;i--)
		{
			if(A[i]>temp)
				A[i+1]=A[i];
			else 
				break;
		}
		A[i+1] = temp;
	}
}

void t4()
{
	int size = 6;
int *A = new int [size];
for (int i = 0; i < size; i++)
A[i] = rand() % 25;
cout << "Original Array\n\t";
for (int i = 0; i < size; i++)
cout << A[i] << " ";
cout << endl;
insertionSort(A, 0, size-1);
cout << "Sorted Array Array\n\t";
for (int i = 0; i < size; i++)
cout << A[i] << " ";
cout << endl;
}

void merge(int*A,int start_index,int middle_index,int last_index)
{
	int i = start_index,j=middle_index+1;
	while(i<=middle_index&&j<=last_index)
	{
		if(A[i]<A[j])
			i++;
		else
		{
			int temp = A[j];
			for(int k = j-1;k>=i;k--)
				A[k+1]= A[k];
			A[i] = temp;
			i++;
			j++;
			middle_index++;
		}
	}
}
void mergeSort(int *A,int start_index,int last_index)
{
	if(start_index>=last_index)
		return;
	else
	{
		int middle_index = (start_index+last_index)/2;
		for(int i = start_index;i<=middle_index;i++)
			cout<<A[i]<<"	";
		cout<<endl;
		mergeSort(A,start_index,middle_index);
		for(int i = middle_index+1;i<=last_index;i++)
			cout<<A[i]<<"	";
		cout<<endl;
		mergeSort(A,middle_index+1,last_index);
		merge(A,start_index,middle_index,last_index);
	}
}
int main()
{
	int size = 7;
int *A = new int [size];
for (int i = 0; i < size; i++)
cin>>A[i];
mergeSort(A,0,6);
}

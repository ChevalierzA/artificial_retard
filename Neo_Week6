#include<fstream>
#include<iostream>
#include<cstring>

using namespace std;

int main()
{
	//Syntax
	//ofstream fout;
	//fout.open("ExampleOutputFile.txt");
	//ofstream fout("ExampleOutputFile.txt");

	//open output file stream
	
	//fout<<"Hi "<<endl;
	//fout<<"Fuck free world"<<endl;
	//fout.close();
	////to append
	ofstream fout("StudentsList.txt",ios::app);
	if(fout.fail())
		cout<<"Fail to open"<<endl;
	else
	{
	fout<<"Test"<<endl;
	fout<<"Test Again"<<endl;
	}
	fout.close();
	
	///Open Existing File
	//ifstream fin;
	//fin.open("U:/CMPT135/Week6/Week6/ExampleOutputFile.txt");
  //ifstream fin("ExampleOutputFile.txt");
	//int x,m;
	//fin>>m;
	//for(int i = 0;i<4;i++)
	//{
	//	fin>>x;
	//	if(x<m)
	//		m=x;
	//}
	//fin.close();
	//cout<<"The Minimum is "<<m<<endl;
	//system("Pause");
}



/*
#include <iostream>
#include <string>
using namespace std;
//////////////////// class Fruit starts here //////////////////////////////
class Fruit
{
private:
int weightInGrams;
string color;
static int counter;
public:
//Constructors
Fruit():weightInGrams(0), color("")
{
cout << "Inside default constructor." << endl;
counter++;
}
Fruit(const int &w, const string &c):weightInGrams(w), color(c)
{
cout << "Inside non-default constructor." << endl;
counter++;
}
Fruit(const Fruit &f):weightInGrams(f.getWeight()), color(f.getColor())
{
cout << "Inside copy constructor." << endl;
counter++;
}
//Destructor
~Fruit()
{
cout << "Inside destructor." << endl;
counter--;
}
//Assignment Operator
Fruit& operator = (const Fruit &f)
{
cout << "Inside assignment operator." << endl;
setWeight(f.getWeight());
setColor(f.getColor());
return *this;
}
//Getters
int getWeight() const
{
return weightInGrams;
}
string getColor() const
{
return color;
}
//Setters
void setWeight(const int &w)
{
weightInGrams=w;
}
void setColor(const string &c)
{
color = c;
}
static int getCounter()
{
return Fruit::counter;
}
};
int Fruit::counter = 0;
//////////////////// class Fruit ends here //////////////////////////////
//Let us have a non-member function that works on Fruits
Fruit getBiggestFruit(const Fruit f1, const Fruit &f2, const Fruit *f3)
{
Fruit f = f1;
if (f2.getWeight() > f.getWeight())
f = f2;
if (f3->getWeight() > f.getWeight())
f = *f3;
cout << "Inside function, currently there are " << Fruit::getCounter() << " fruits." << endl;
return f;
}
int main()
{
Fruit f1;
f1.setWeight(15);
f1.setColor("Green");
Fruit f2(10, "Yellow");
Fruit f3 = f2;
Fruit f4 = getBiggestFruit(f1, f2, &f3);
f2 = f4;
cout << "Back in main, currently, there are " << Fruit::getCounter() << " fruits." << endl;
system("Pause");
return 0;
}
*/

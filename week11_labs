//
//  main.cpp
//  testfield2
//
//  Created by VINCENT 胡 on 2018/6/30.
//  Copyright © 2018年 VINCENT 胡. All rights reserved.
//

#include <iostream>
using namespace std;
///Q1
int stringLength(const char X[]){
    int length = 0;
    for (int i = 0; X[i]!='\0'; i++) {
        length++;
    }
    return length;///the length only counts printable characters
}
///Q4
int findLastCharacter(const char X[],const char A){
    int ans = -1;
    for (int i = 0; X[i]!='\0'; i++) {
        if (A==X[i]) {
            ans=i;
        }else continue;
    }
    return ans;
}
///Q9
bool isLower(const char X){
    if (X>='a'&&X<='z') {
        return true;
    }
    return false;
}
///Q13
int countLowerAlphabets(const char X[]){
    int ans = 0;
    for (int i=0; X[i]!='\0'; i++) {
        if (X[i]>='a'&&X[i]<='z') {
            ans++;
        }
    }
    return ans;
}
///Q14
char* getLowerAlphabets(const char X[]){
    int size = countLowerAlphabets(X);
    char*Ans = new char[size];
    int j=0;
    for (int i=0; X[i]!='\0'; i++) {
        if (islower(X[i])) {
            Ans[j]=X[i];
            j++;
        }
    }
    Ans[j]='\0';
    return Ans;
}
///Q21
bool isPalindrome(const char X[]){
    bool Ans=false;
    int index = 0;
    for (int i=0; X[i]!='\0'; i++) {
        index++;
    }
    index--;
    if (index==0) {
        return false;
    }
    for (int i = 0; i<=index/2; i++) {
        if (X[i]==X[index-i]) {
            Ans=true;
        }else{
            Ans=false;
            break;
        }
    }
    return Ans;
}
///Q25
int countCharactersFrom(const char X[],const char flag,const int index){
    int repeatTime = 0;
    for (int i=index; X[i]!='\0'; i++) {
        if (flag==X[i]) {
            repeatTime++;
        }
    }
    return repeatTime;
}
///Q26
int countDistinctChars(const char X[]){
    int distinctNum = 0;
    for (int i=0; X[i]!='\0'; i++) {
        if (countCharactersFrom(X, X[i], i)==1) {
            distinctNum++;
        }
    }
    return distinctNum;
}
///Q27
char*getDistinctChars(const char X[]){
    int j = 0;
    int size = countDistinctChars(X);
    size++;
    char*Ans = new char[size];
    for (int i=0; X[i]!='\0'; i++) {
        if (countCharactersFrom(X, X[i], i)==1) {
            Ans[j]=X[i];
            j++;
        }
    }
    size--;
    Ans[size]='\0';
    return Ans;
}

///Q28
int stringCompare(const char X1[],const char X2[]){
    int num = 0;
    if (stringLength(X1)<stringLength(X2)) {
        num = -1;
    }else if(stringLength(X1)>stringLength(X2)) {
        num = 1;
    }else if(stringLength(X1)==stringLength(X2)) {
        for (int i = 0; X1[i]!='\0'; i++) {
            if(X1[i]<X2[i]){
                num = -1;
                break;
            }else if(X1[i]>X2[i]){
                num = 1;
                break;
            }else continue;
        }
    }
    return num;
}

///Q30
void stringCopy(const char X1[],char X2[]){
    int size = stringLength(X2);
    char* TooEZ = new char[size];
    TooEZ = X2;
    if (stringLength(X1)==stringLength(X2)) {
        for (int i = 0; X1[i]!='\0'; i++) {
            TooEZ[i]=X1[i];
        }
    }else if(stringLength(X1)<stringLength(X2)){
        for (int i = 0; X1[i]!='\0'; i++) {
            TooEZ[i]=X1[i];
        }
        TooEZ[stringLength(X1)]='\0';
    }
}
int main()
{
    ///char A[]="rsd";
    ///char B[]="rsba";
    ///stringCopy(A, B);
    ///cout<<B;
    //cout<<stringCompare(A, B);
    //cout<<stringLength(A);
    //cout<<countDistinctChars(A);
    //char*S2;
    //S2=getDistinctChars(A);
    //S2= getLowerAlphabets(A);
    //char ch1 = 'z';
    //cout<<findLastCharacter(A, ch1);
    //cout<<S2;
    return 0;
}

